package com.midproject.tripin.service.impl;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.URLEncoder;
import java.util.List;

import javax.net.ssl.HttpsURLConnection;

import org.json.JSONArray;
import org.json.JSONObject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.midproject.tripin.model.PlaceDestThemesVO;
import com.midproject.tripin.model.PlaceVO;
import com.midproject.tripin.repository.PlaceOpenAPIRepo;
import com.midproject.tripin.service.PlaceOpenAPIService;
import com.midproject.tripin.util.PlaceThemeSort;


@Service("placeOpenAPIService")
public class PlaceOpenAPIServiceImpl implements PlaceOpenAPIService{
	@Autowired
	private PlaceOpenAPIRepo placeOpenAPIRepo;


	private String serviceKey = "It/GnlGdSEN8rTI9utdTTht/odchebqCirUx8t7QCttJazG+r1gS/frN6Ku1kIdVfr3Carf+PVow7NpHVG5jpg==";

	public int fetchAndSavePlaces() {
		int savedCount = 0;

		//openAPI 서버로부터 데이터 받아오기
		try {
			//			String serviceKey2 = "1qSPRxsqh7tCrPLZHHPJMbEetoA2JibSBG+2e63pfVhjspqP6+nsgGLf+61x6Sg+Dun2+EyaZ2p9GQT00/lxCA==";
			//지역 코드
			int[] areaCodes = {1};
			// 관광지, 행사, 레저, 숙박, 음식 등
			//			int[] contentTypes = {32, 38, 39};
			int[] contentTypes = {12, 14, 15, 28, 32, 38, 39};
			int numOfRows = 10;

			for(int area : areaCodes) {
				for (int contentType : contentTypes) {
					int pageNo = 1;
					int maxPages = 5;
					boolean morePages = true;

					while(morePages) {
						HttpsURLConnection conn = null;
						BufferedReader br = null;

						try {
							String urlStr = "https://apis.data.go.kr/B551011/KorService2/areaBasedList2"
									+ "?serviceKey=" + URLEncoder.encode(serviceKey, "UTF-8")
									+ "&numOfRows=" + numOfRows //한페이지당 결과 수 
									+ "&pageNo=" + pageNo		//요청할 페이지 번호
									+ "&MobileOS=ETC"			//호출하는 os
									+ "&MobileApp=Tripin"		//호출 앱 이름 
									+ "&contentTypeId=" + contentType	//콘텐츠유형
									+ "&areaCode=" + area		//지역코드 
									+ "&arrange=D"				//정렬방법 : 최신순
									+ "&_type=json";			//응답타입

							//Java에서 외부 api에 get요청 
							URL url = new URL(urlStr);
							conn = (HttpsURLConnection) url.openConnection();
							conn.setRequestMethod("GET");

							//openAPI에서 관광지 정보 가져와서 DB저장 

							//api응답 줄 단위로 읽어 문자열sb로 저장
							br = new BufferedReader(new InputStreamReader(conn.getInputStream()));
							StringBuilder sb = new StringBuilder();
							String line;
							while ((line = br.readLine()) != null) sb.append(line);



							System.out.println("응답결과"+sb.toString());

							//JSON파싱
							JSONObject response = new JSONObject(sb.toString())
									.getJSONObject("response")
									.getJSONObject("body");

							//전체 데이터 개수
							int totalCount = response.getInt("totalCount");

							//items객체에서 item 배열 꺼냄 : 관광지정보 포함 배열 
							JSONArray items = response.getJSONObject("items")
									.getJSONArray("item");


							//item 하나씩 파싱 & VO 담기
							for (int i = 0; i < items.length(); i++) {
								JSONObject obj = items.getJSONObject(i);

								PlaceVO place = new PlaceVO();
								place.setDest_id(obj.getInt("contentid"));
								place.setDest_name(obj.getString("title"));
								place.setDest_type(obj.optString("cat2", ""));
								place.setFull_address(obj.optString("addr1", ""));
								place.setContact_num(obj.optString("tel", ""));
								place.setRepr_img_url(obj.optString("firstimage", ""));
								place.setOrig_json_data(obj.toString());
								place.setCreated_time(obj.optString("createdtime",""));
								place.setContent_type(obj.optInt("contenttypeid"));

								//카테고리 정보 저장 
								place.setCat1(obj.optString("cat1",""));
								place.setCat2(obj.optString("cat2",""));
								place.setCat3(obj.optString("cat3",""));


								//DB중복확인 후 저장
								if(placeOpenAPIRepo.selectPlaceById(place.getDest_id())==null) {

									//로그
									System.out.println("dest_id: " + place.getDest_id() + " (" + ((Object)place.getDest_id()).getClass().getName() + ")");
									System.out.println("dest_name: " + place.getDest_name() + " (" + place.getDest_name().getClass().getName() + ")");

									//저장
									placeOpenAPIRepo.insertPlace(place);
									//cat1,2,3 기준으로 테마이름 리턴
									List<String> theme_name = PlaceThemeSort.mapTheme(place.getCat1(), place.getCat2(), place.getCat3());
									//테마이름으로 themes 테이블에서 해당 테마 id 조회 

									for(String theme : theme_name) {
										Integer theme_id = placeOpenAPIRepo.selectThemeIdByName(theme);

										//themeId가 null이 아니면 실행 
										if(theme_id != null) {
											PlaceDestThemesVO vo = new PlaceDestThemesVO();
											vo.setDest_id(place.getDest_id());
											vo.setTheme_id(theme_id);
											placeOpenAPIRepo.insertDestTheme(vo);

										}
									} // end of for theme

									savedCount++;

									if(savedCount >= 50) {
										morePages = false; //while루프종료
										break;  //for(items)루프탈출
									}
								}// end of if check duplicate db

							} // end of for pasing


							int totalPages = (int)Math.ceil((double) totalCount / numOfRows);
							if (pageNo >= totalPages || pageNo >= maxPages) {
								morePages = false;
							} else {
								pageNo++;
							}
						} catch (Exception e){
							e.printStackTrace();
						} finally {
							try {
							 if (br != null) br.close();
							} catch (IOException e) {
								e.printStackTrace();
							}
							 if (conn != null) conn.disconnect();
						}
					}//end of while
				}//end of for contentType
			}// end of for area


		} catch (Exception e) {
			e.printStackTrace();

		} 

		return savedCount;
	}

	//contentid별 여행지 상세정보 불러오기
	public JSONObject getPlaceDetail (int dest_id, int content_type) {
		HttpURLConnection conn = null;
		BufferedReader br = null;
		
		try {
			String detailUrl = "https://apis.data.go.kr/B551011/KorService2/detailIntro2";
			StringBuilder urlB = new StringBuilder(detailUrl);
			urlB.append("?serviceKey=").append(URLEncoder.encode(serviceKey,"UTF-8"));
			urlB.append("&MobileOS=ETC");
			urlB.append("&MobileApp=Tripin");
			urlB.append("&contentId=").append(dest_id);
			urlB.append("&contentTypeId=").append(content_type);
			urlB.append("&_type=json");

			URL url = new URL(urlB.toString());
			conn = (HttpURLConnection) url.openConnection();
			conn.setRequestMethod("GET"); 

			br = new BufferedReader(new InputStreamReader(conn.getInputStream()));
			StringBuilder sb = new StringBuilder();
			String line;
			while ((line = br.readLine()) != null) sb.append(line);
			
			
			JSONObject j = new JSONObject(sb.toString());
			JSONObject item = j.getJSONObject("response")
							   .getJSONObject("body")
							   .getJSONObject("items")
							   .getJSONArray("item")
							   .getJSONObject(0);
			
			JSONObject result = new JSONObject();
			result.put("contenttypeid", content_type);
			
			switch (content_type) {
			case 12: // 관광지
		        result.put("infocenter", item.optString("infocenter", ""));//문의
		        result.put("usetime", item.optString("usetime", ""));//이용시간
		        result.put("usefee", item.optString("usefee", "")); //요금
		        result.put("restdate", item.optString("restdate", "")); //쉬는날
		        result.put("parking", item.optString("parking", "")); //주차시설
		        result.put("useseason", item.optString("useseason", "")); //이용시기
		        break;

		    case 14: // 문화시설
		        result.put("usetime", item.optString("usetimeculture", "")); //이용시간
		        result.put("infocenter", item.optString("infocenterculture", ""));//문의
		        result.put("usefee", item.optString("usefeeculture", "")); //이용요금
		        result.put("restdate", item.optString("restdateculture", "")); //쉬는날
		        result.put("parking", item.optString("parkingculture", "")); //주차시설
		        result.put("spendtime", item.optString("spendtime", "")); //관람소요시간
		        break;

		    case 15: // 행사/축제
		        result.put("eventplace", item.optString("eventplace", "")); //행사장소
		        result.put("eventstartdate", item.optString("eventstartdate", "")); //행사시작일
		        result.put("eventenddate", item.optString("eventenddate", "")); //행사종료일
		        result.put("usetime", item.optString("playtime", "")); //공연시간
		        result.put("placeinfo", item.optString("placeinfo", "")); //행사장위치안내
		        result.put("sponsor", item.optString("sponsor1", "")); //주최자정보
		        result.put("usefee", item.optString("usetimefestival", "")); //이용요금
		        result.put("infocenter", item.optString("bookingplace", "")); //예매처
		        result.put("program", item.optString("program", "")); //행사프로그램
		        result.put("spendtime", item.optString("spendtimefestival", "")); //관람소요시간
		        result.put("homepage", item.optString("eventhomepage", "")); //행사홈페이지
		        break;

		    case 28: // 레포츠
		        result.put("infocenter", item.optString("infocenterleports", "")); //문의
		        result.put("openperiod", item.optString("openperiod", "")); //개장기간
		        result.put("usefee", item.optString("usefeeleports", "")); //입장료
		        result.put("usetime", item.optString("usetimeleports", "")); //이용시간
		        result.put("restdate", item.optString("restdateleports", "")); //쉬는날
		        result.put("reservation", item.optString("reservation", "")); //예약안내
		        result.put("accomcount", item.optString("accomcountleports", "")); //수용인원
		        result.put("age", item.optString("expagerangeleports", "")); //체험가능연령
		        break;

		    case 32: // 숙박
		        result.put("roomtype", item.optString("roomtype", "")); //객실유형
		        result.put("roomcount", item.optString("roomcount", "")); //객실수
		        result.put("checkintime", item.optString("checkintime", "")); //입실시간
		        result.put("checkouttime", item.optString("checkouttime", "")); //퇴실시간
		        result.put("infocenter", item.optString("infocenterlodging", "")); //문의		        
		        result.put("reservationurl", item.optString("reservationurl", "")); //예약url
		        result.put("accomcount", item.optString("accomcountlodging", "")); //수용가능인원
		        result.put("barbecue", item.optString("barbecue", "")); //바베큐장여부
		        result.put("refund", item.optString("refuntregulation", "")); //환불규정
		        break;

		    case 38: // 쇼핑
		        result.put("saleitem", item.optString("saleitem", "")); //판매품복
		        result.put("usetime", item.optString("opentime", "")); //영업시간
		        result.put("restdate", item.optString("restdateshopping", ""));//쉬는날
		        result.put("parking", item.optString("parkingshopping", "")); //주차시설
		        result.put("infocenter", item.optString("infocentershopping", "")); //주차시설
		        break;

		    case 39: // 음식점
		        result.put("firstmenu", item.optString("firstmenu", "")); //대표메뉴
		        result.put("treatmenu", item.optString("treatmenu", "")); //취급메뉴
		        result.put("parking", item.optString("parkingfood", "")); //주차시설
		        result.put("usetime", item.optString("opentimefood", ""));
		        result.put("restdatefood", item.optString("restdatefood", "")); //쉬는날
		        result.put("packing", item.optString("packing", "")); //포장가능
		        result.put("seat", item.optString("seat", "")); //좌석수
		        result.put("reservation", item.optString("reservationfood", "")); //예약안내
		        break;

		    default:
		        result.put("overview", item.optString("overview", ""));
		        break;
			}
			
			
			return result;

		}catch (Exception ex){
			ex.printStackTrace();
			return null;
		}finally {
			try {
				if(br != null) br.close();
			} catch (IOException e){
				e.printStackTrace();
			}
			if (conn != null) conn.disconnect();
		}
		
	}



}
